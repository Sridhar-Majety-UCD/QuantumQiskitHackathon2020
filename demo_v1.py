# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qiskit import *
import numpy as np
import matplotlib as matplot
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

counter = 0
#qr = QuantumRegister(3)
#cr = ClassicalRegister(3)
#qc = QuantumCircuit(qr, cr)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1173, 839)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #  push button to get user approval
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(80, 730, 88, 27))
        self.pushButton.setObjectName("Submit Button")
        #code to invoke quantum modules for calculations
        self.pushButton.clicked.connect(self.calculateQbitState)

        # Reset button 
        self.pushButtonReset = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonReset.setGeometry(QtCore.QRect(80, 770, 88, 27))
        self.pushButtonReset.setObjectName("Reset Button")
        self.pushButtonReset.clicked.connect(self.clearLabelData)
        


        #label for displaying text
        self.label = QtWidgets.QLabel(self.centralwidget)
        #self.label.setGeometry(QtCore.QRect(660, 190, 68, 19))
        self.label.setGeometry(QtCore.QRect(20, 60, 1101, 501))
        #self.label.setText("")
        self.label.setObjectName("label")
        self.label.setScaledContents(True)
        #self.updatePictureLabel()

        #label-2 -> step static text
        #label-3 -> step counter display - dynamic text
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(320, 730, 31, 19))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(370, 730, 41, 19))
        self.label_3.setObjectName("label_3")


        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Next"))
        self.pushButtonReset.setText(_translate("MainWindow", "Reset"))
        self.label_2.setText(_translate("MainWindow", "Step"))
        self.label_3.setText(_translate("MainWindow", "0"))



    def canvasUI(self):
        print("in canvas UI")

    # code to get circuit data from quiskit
    def calculateQbitState(self,MainWindow):
        global counter 
        counter = counter + 1
        qr = QuantumRegister(3)
        cr = ClassicalRegister(3)
        qc = QuantumCircuit(qr, cr)
        self.updateCounterStepLabel()
        print("calculateQbitState ")
        print(str(counter))
        
        if counter == 1:
            print(str(counter))
            qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            qc.draw(output='mpl',filename='./img1')
            self.label.setPixmap(QtGui.QPixmap('./img1'))
        if counter == 2:
            qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            qc.cx(0, 1)
            qc.draw(output='mpl',filename='./img2')
            self.label.setPixmap(QtGui.QPixmap('./img2'))
        if counter == 3:
            qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            qc.cx(0, 1)
            qc.ry(np.pi, 0)
            qc.draw(output='mpl',filename='./img3')
            self.label.setPixmap(QtGui.QPixmap('./img3'))
        if counter == 4:
            qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            qc.cx(0, 1)
            qc.ry(np.pi,0)
            qc.cx(0,2)
            qc.draw(output='mpl',filename='./img4')
            self.label.setPixmap(QtGui.QPixmap('./img4'))
        print("exiting")



        #self.label.setText(str(type(picResult)))
        #self.updatePictureLabel()
        
        
        #self.label.setPixmap(QtGui.QPixmap('./img'))

    def updatePictureLabel(self):
        self.label.adjustSize()

    def updateCounterStepLabel(self):
        global counter
        self.label_3.setText(str(counter))


    def clearLabelData(self):
        self.label.setPixmap(QtGui.QPixmap())
        global counter 
        counter = 0
        self.updateCounterStepLabel()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
