# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qiskit import *
from qiskit.tools.visualization import plot_bloch_multivector
import numpy as np
import matplotlib as matplot
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

counter = 0
#qr = QuantumRegister(3)
#cr = ClassicalRegister(3)
#qc = QuantumCircuit(qr, cr)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1900, 924)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(70, 710, 88, 27))
        self.pushButton.setObjectName("pushButton")
        self.circuitDiagram = QtWidgets.QLabel(self.centralwidget)
        self.circuitDiagram.setGeometry(QtCore.QRect(1290, 140, 491, 391))
        self.circuitDiagram.setText("")
        self.circuitDiagram.setScaledContents(True)
        self.circuitDiagram.setObjectName("circuitDiagram")
        self.pushResetButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushResetButton.setGeometry(QtCore.QRect(70, 750, 88, 27))
        self.pushResetButton.setObjectName("pushButton_2")
        self.stepCountLabel = QtWidgets.QLabel(self.centralwidget)
        self.stepCountLabel.setGeometry(QtCore.QRect(270, 710, 31, 19))
        self.stepCountLabel.setObjectName("stepCountLabel")
        self.stepCounterDynamic = QtWidgets.QLabel(self.centralwidget)
        self.stepCounterDynamic.setGeometry(QtCore.QRect(330, 710, 41, 19))
        self.stepCounterDynamic.setObjectName("stepCounterDynamic")
        self.blochSphere = QtWidgets.QLabel(self.centralwidget)
        self.blochSphere.setGeometry(QtCore.QRect(670, 140, 521, 391))
        self.blochSphere.setText("")
        self.blochSphere.setScaledContents(True)
        self.blochSphere.setObjectName("blochSphere")
        self.atomTransition = QtWidgets.QLabel(self.centralwidget)
        self.atomTransition.setGeometry(QtCore.QRect(100, 140, 461, 391))
        self.atomTransition.setText("")
        self.atomTransition.setScaledContents(True)
        self.atomTransition.setObjectName("atomTransition")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(270, 740, 121, 19))
        self.label_6.setObjectName("label_6")
        self.stepDescription = QtWidgets.QLabel(self.centralwidget)
        self.stepDescription.setGeometry(QtCore.QRect(410, 740, 381, 19))
        self.stepDescription.setText("")
        self.stepDescription.setObjectName("stepDescription")
        self.histogram = QtWidgets.QLabel(self.centralwidget)
        self.histogram.setGeometry(QtCore.QRect(1260, 580, 581, 281))
        self.histogram.setObjectName("histogram")
        self.histogram.setScaledContents(True)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 80, 161, 19))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(650, 70, 111, 19))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1270, 60, 141, 19))
        self.label_3.setObjectName("label_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(980, 710, 211, 27))
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #Hiding histogram button and label 
        self.histogram.setHidden(True)
        self.pushButton_3.setHidden(True)

        #event listeners configuration
        #code to invoke quantum modules for calculations
        self.pushButton.clicked.connect(self.updateCircuitDiagram)
        # Reset button 
        self.pushResetButton.clicked.connect(self.resetDashBoard)
        #Histogram click event
        self.pushButton_3.clicked.connect(self.showHistogramData)

        #initial states of qubits on Bloch sphere
        self.blochSphere.setPixmap(QtGui.QPixmap('./img0_BlochDiagram'))
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Next"))
        self.pushResetButton.setText(_translate("MainWindow", "Reset"))
        self.stepCountLabel.setText(_translate("MainWindow", "Step"))
        self.stepCounterDynamic.setText(_translate("MainWindow", "0"))
        self.label_6.setText(_translate("MainWindow", "Step Description"))
        self.histogram.setText(_translate("MainWindow", "Histogram"))
        self.label.setText(_translate("MainWindow", "Atom transition"))
        self.label_2.setText(_translate("MainWindow", "Bloch diagram"))
        self.label_3.setText(_translate("MainWindow", "Circuit Diagram"))
        self.pushButton_3.setText(_translate("MainWindow", "Click here for Histogram"))



    # code to get circuit data from quiskit
    def updateCircuitDiagram(self,MainWindow):
        global counter 
        counter = counter + 1
        qr = QuantumRegister(3)
        cr = ClassicalRegister(3)
        qc = QuantumCircuit(qr, cr)
        self.updateCounterStepLabel()
        print("updateCircuitDiagram ")
        print(str(counter))
        
        if counter == 1:
            #qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            #qc.draw(output='mpl',filename='./img1')
            self.circuitDiagram.setPixmap(QtGui.QPixmap('./img1_CircuitDiagram'))
            self.blochSphere.setPixmap(QtGui.QPixmap('./img1_BlochDiagram'))
            self.updateStepDescription("step 1")
        if counter == 2:
            #qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            #qc.cx(0, 1)
            #qc.draw(output='mpl',filename='./img2')
            self.circuitDiagram.setPixmap(QtGui.QPixmap('./img2_CircuitDiagram'))
            self.blochSphere.setPixmap(QtGui.QPixmap('./img2_BlochDiagram'))
            self.updateStepDescription("step 2")
        if counter == 3:
            #qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            #qc.cx(0, 1)
            #qc.ry(np.pi, 0)
            #qc.draw(output='mpl',filename='./img3')
            self.circuitDiagram.setPixmap(QtGui.QPixmap('./img3_CircuitDiagram'))
            self.blochSphere.setPixmap(QtGui.QPixmap('./img3_BlochDiagram'))
            self.updateStepDescription("step 3")
        if counter == 4:
            #qc.ry(np.pi/2, 0) #pi/2 rotation of q0
            #qc.cx(0, 1)
            #qc.ry(np.pi,0)
            #qc.cx(0,2)
            #qc.draw(output='mpl',filename='./img4')
            self.circuitDiagram.setPixmap(QtGui.QPixmap('./img4_CircuitDiagram'))
            self.blochSphere.setPixmap(QtGui.QPixmap('./img4_BlochDiagram'))
            self.updateStepDescription("step 4")
            self.pushButton_3.setHidden(False)


        print("exiting")



        #self.label.setText(str(type(picResult)))
        #self.updatePictureLabel()
        
        
        #self.label.setPixmap(QtGui.QPixmap('./img'))

    def inititalizeQbitStates(self):
        qr = QuantumRegister(3)
        cr = ClassicalRegister(3)
        qc = QuantumCircuit(qr, cr)
        backend = Aer.get_backend('statevector_simulator')
        out = execute(qc,backend).result().get_statevector()
        fig0 = plot_bloch_multivector(out)
        fig0.savefig("./img0_BlochDiagram")

        # step-1 for counter =1 
        qc.ry(np.pi/2, 0) #pi/2 rotation of q0
        qc.draw(output='mpl',filename='./img1_CircuitDiagram')
        backend = Aer.get_backend('statevector_simulator')
        out = execute(qc,backend).result().get_statevector()
        fig1 = plot_bloch_multivector(out)
        fig1.savefig("./img1_BlochDiagram")

        # step-2 for counter =2
        qc.cx(0, 1)
        qc.draw(output='mpl',filename='./img2_CircuitDiagram')
        backend = Aer.get_backend('statevector_simulator')
        out = execute(qc,backend).result().get_statevector()
        fig2 = plot_bloch_multivector(out)
        fig2.savefig("./img2_BlochDiagram")

        # step-3 for counter =3
        qc.ry(np.pi, 0)
        qc.draw(output='mpl',filename='./img3_CircuitDiagram')
        backend = Aer.get_backend('statevector_simulator')
        out = execute(qc,backend).result().get_statevector()
        fig3 = plot_bloch_multivector(out)
        fig3.savefig("./img3_BlochDiagram")

        # step-4 for counter =4
        qc.cx(0,2)
        qc.measure(qr, cr)
        qc.draw(output='mpl',filename='./img4_CircuitDiagram')
        backend = Aer.get_backend('statevector_simulator')
        out = execute(qc,backend).result().get_statevector()
        fig4 = plot_bloch_multivector(out)
        fig4.savefig("./img4_BlochDiagram")

        #histogram plot
        simulator = Aer.get_backend('qasm_simulator')
        result = execute(qc, backend = simulator).result()
        from qiskit.tools.visualization import plot_histogram
        fig = plot_histogram(result.get_counts(qc))
        fig.savefig("./Histogram")

    def showHistogramData(self):
        self.histogram.setPixmap(QtGui.QPixmap('./Histogram'))
        self.histogram.setHidden(False)

        


    def resetDashBoard(self):
        self.circuitDiagram.setPixmap(QtGui.QPixmap())
        self.blochSphere.setPixmap(QtGui.QPixmap())
        self.atomTransition.setPixmap(QtGui.QPixmap())
        self.histogram.setHidden(True)
        self.pushButton_3.setHidden(True)

        self.stepDescription.setText("")
        global counter 
        counter = 0
        self.updateCounterStepLabel()

        # TODO - remove histogram and related button when implemented


    def updateCounterStepLabel(self):
        global counter
        self.stepCounterDynamic.setText(str(counter))

    def updateStepDescription(self,stepDescText):
        self.stepDescription.setText(stepDescText)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.inititalizeQbitStates()
    MainWindow.show()
    sys.exit(app.exec_())
